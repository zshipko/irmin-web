open Lwt.Infix

external realpath : string -> string = "ml_realpath"

let irmin_js = [%blob "../../js/irmin.js"]

let read_file filename =
  let ic = open_in filename in
  let len = in_channel_length ic in
  let res = really_input_string ic len in
  close_in ic; res

module Make (Store : Irmin_graphql.STORE) = struct
  module Graphql = Irmin_graphql.Make (Store)

  type t =
    { store : Store.t
    ; allow_mutations : bool }

  let create ?(allow_mutations = true) store = {store; allow_mutations}
  let start_graphql_server t port = Graphql.start_server ~port t.store

  let check t doc =
    let open Graphql_parser in
    if not t.allow_mutations then
      List.for_all
        (fun op ->
          match op with
          | Operation {optype = Mutation; _} ->
            false
          | _ ->
            true )
        doc
    else true

  let graphql t graphql_address req _params body =
    let headers = Yurt.Request.headers req in
    Yurt.Body.to_string body
    >>= fun body ->
    let json = Ezjsonm.from_string body in
    let query = Ezjsonm.find json ["query"] |> Ezjsonm.decode_string_exn in
    let doc = Graphql_parser.parse query in
    match doc with
    | Ok doc ->
      if check t doc then
        let body = Yurt.Body.of_string body in
        Yurt.Client.post ~headers ~body graphql_address
        >>= fun (_, body) -> Yurt.Server.string body
      else Yurt.Server.string ~status:400 "Encountered blacklisted operation"
    | Error _ ->
      Yurt.Server.string ~status:400 "Invalid GraphQL query"

  let irmin_js_handler address _req _params _body =
    Yurt.Server.string
      ~headers:(Yurt.Header.of_list [("Content-Type", "text/javacript")])
      ( irmin_js
      ^ Printf.sprintf
          "\n\n//Generated by Irmin_web\nlet ir = new Irmin(\"%s\");\n" address
      )

  let run_custom ?handler ?(addr = "localhost") ?(port = 8080) ?(static = "./")
      t =
    let open Yurt.Server in
    let static = realpath static in
    let graphql_port = port + 1 in
    let address = Printf.sprintf "http://%s:%d/graphql" addr port in
    let graphql_address =
      Printf.sprintf "http://localhost:%d/graphql" graphql_port
    in
    Lwt.async (fun () -> start_graphql_server t graphql_port);
    server addr port
    >| post "/graphql" (graphql t graphql_address)
    >| get "/irmin.js" (irmin_js_handler address)
    >| folder static "static"
    >| static_file (Filename.concat static "index.html") ""
    >| (fun server ->
         match handler with
         | Some handler ->
           handler server
         | None ->
           server )
    |> start

  let wrap_html ~title ~js ~css h =
    let title' = title in
    Yurt_html.(
      html
        [ head
            [ meta [("charset", "utf-8")]
            ; title title'
            ; link [("rel", "stylesheet"); ("href", "/static/css/" ^ css)]
            ; script ~attr:[("src", "/irmin.js")] "" ]
        ; body ~content:h [script ~attr:[("src", "/static/js/" ^ js)] ""] ])

  let run ?handler ?(addr = "localhost") ?(port = 8080) ~title ~css ~js ~html t
      =
    let html' = html in
    let open Yurt.Server in
    let graphql_port = port + 1 in
    let address = Printf.sprintf "http://%s:%d/graphql" addr port in
    let graphql_address =
      Printf.sprintf "http://localhost:%d/graphql" graphql_port
    in
    Lwt.async (fun () -> start_graphql_server t graphql_port);
    server addr port
    >| post "/graphql" (graphql t graphql_address)
    >| get "/irmin.js" (irmin_js_handler address)
    >| get
         ("/static/js/" ^ fst js)
         (fun _req _params _body ->
           let headers =
             Yurt.Header.of_list [("Content-Type", "text/javacript")]
           in
           string ~headers (snd js) )
    >| get
         ("/static/css/" ^ fst css)
         (fun _req _params _body ->
           string
             ~headers:(Yurt.Header.of_list [("Content-Type", "text/css")])
             (snd css) )
    >| get "/" (fun _req _params _body ->
           html
             ~headers:(Yurt.Header.of_list [("Content-Type", "text/html")])
             (wrap_html ~title ~js:(fst js) ~css:(fst css) html') )
    >| (fun server ->
         match handler with
         | Some handler ->
           handler server
         | None ->
           server )
    |> start
end
