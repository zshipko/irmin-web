(*---------------------------------------------------------------------------
   Copyright (c) 2018 Zach Shipko. All rights reserved.
   Distributed under the ISC license, see terms at the end of the file.
   %%NAME%% %%VERSION%%
  ---------------------------------------------------------------------------*)

open Lwt.Infix

external realpath: string -> string = "ml_realpath"

let irmin_js = [%blob "../../js/irmin.js"]

let read_file filename =
  let ic = open_in filename in
  let len = in_channel_length ic in
  let res = really_input_string ic len in
  close_in ic; res

module Make(Store: Irmin.S) = struct
  module Graphql = Irmin_graphql.Make(Store)

  type t = {
    cfg: Irmin.config;
    repo: Store.repo;
    allow_mutations: bool;
  }

  let create ?(allow_mutations = true) cfg =
    Store.Repo.v cfg >|= fun repo ->
    {cfg; repo; allow_mutations}

  let start_graphql_server t port =
    Store.Repo.v t.cfg >>= fun repo ->
    Store.master repo >>= fun master ->
    Graphql.start_server ~port master

  let check t doc =
    let open Graphql_parser in
    if not t.allow_mutations then
      List.for_all (fun op ->
        match op with
        | Operation {optype = Mutation; _} -> false
        | _ -> true) doc
    else
      true

  let graphql t graphql_address req _params body =
    let headers = Yurt.Request.headers req in
    Yurt.Body.to_string body >>= fun body ->
    let json = Ezjsonm.from_string body in
    let query = Ezjsonm.find json ["query"] |> Ezjsonm.decode_string_exn in
    let doc = Graphql_parser.parse query in
    match doc with
    | Ok doc ->
        if check t doc then
          let body = Yurt.Body.of_string body in
          Yurt.Client.post ~headers ~body graphql_address >>= fun (_, body) -> Yurt.Server.string body
        else
          Yurt.Server.string ~status:400 "Encountered blacklisted operation"
    | Error _ -> Yurt.Server.string ~status:400 "Invalid GraphQL query"

  let run ?handler ?(addr = "localhost") ?(port = 5089) ?(static = "./") t =
    let open Yurt.Server in
    let static = realpath static in
    let graphql_port = port + 1 in
    let address = Printf.sprintf "http://%s:%d/graphql" addr port in
    let graphql_address = Printf.sprintf "http://localhost:%d/graphql" graphql_port in
    Lwt.async (fun () -> start_graphql_server t graphql_port);
    server addr port
    >| post "/graphql" (graphql t graphql_address)
    >| get "/irmin.js" (fun _req _params _body ->
      string ~headers:(Yurt.Header.of_list ["Content-Type", "text/javacript"]) (irmin_js ^ Printf.sprintf "\n\n//Generated by Irmin_web\nlet ir = new Irmin(\"%s\");\n" address))
    >| folder static "static"
    >| static_file (Filename.concat static "index.html") ""
    >| begin
      fun server ->
        (match handler with
         | Some handler -> handler server
         | None -> server)
    end
    |> start

  let run_simple ?handler ?(addr = "localhost") ?(port = 5089) ~css ~js ~html t =
    let html' = html in
    let open Yurt.Server in
    let graphql_port = port + 1 in
    let address = Printf.sprintf "http://%s:%d/graphql" addr port in
    let graphql_address = Printf.sprintf "http://localhost:%d/graphql" graphql_port in
    Lwt.async (fun () -> start_graphql_server t graphql_port);
    server addr port
    >| post "/graphql" (graphql t graphql_address)
    >| get "/irmin.js" (fun _req _params _body ->
      string ~headers:(Yurt.Header.of_list ["Content-Type", "text/javacript"]) (irmin_js ^ Printf.sprintf "\n\n//Generated by Irmin_web\nlet ir = new Irmin(\"%s\");\n" address))
    >| get ("/static/js/" ^ fst js) (fun _req _params _body ->
      let headers = Yurt.Header.of_list ["Content-Type", "text/javacript"] in
      string ~headers (snd js))
    >| get ("/static/css/" ^ fst css) (fun _req _params _body -> string ~headers:(Yurt.Header.of_list ["Content-Type", "text/css"]) (snd css))
    >| get "/" (fun _req _params _body -> string ~headers:(Yurt.Header.of_list ["Content-Type", "text/html"]) html')
    >| begin
      fun server ->
        (match handler with
         | Some handler -> handler server
         | None -> server)
    end
    |> start
end

module Cli = struct
  open Cmdliner

  let port =
    let doc = "Port to listen on" in
    Arg.(value & opt int 8080 & info ["p"; "port"] ~docv:"PORT" ~doc)

  let contents =
    let doc = "Content type" in
    Arg.(value & opt string "string" & info ["c"; "contents"] ~docv:"CONTENTS" ~doc)

  let store =
    let doc = "Store type" in
    Arg.(value & opt string "git" & info ["s"; "store"] ~docv:"STORE" ~doc)

  let root =
    let doc = "Store location" in
    Arg.(value & opt string "/tmp/irmin" & info ["root"] ~docv:"PATH" ~doc)

  let static =
    let doc = "Static path" in
    Arg.(value & pos 0 (some string) None  & info [] ~docv:"PATH" ~doc)

  let mutations =
    let doc = "Enable/disable mutations" in
    Arg.(value & opt bool true & info ["mutations"] ~docv:"ALLOWED" ~doc)

  let config path =
    let head = Git.Reference.of_string "refs/heads/master" in
    Irmin_git.config ~head path

  let run_simple name ~css ~js ~html =
    let run port root contents store allow_mutations =
      let c = Irmin_unix.Cli.mk_contents contents in
      let (module Store) = Irmin_unix.Cli.mk_store store c in
      let module Server = Make(Store) in
      let p =
        Server.create ~allow_mutations (config root) >>= fun server ->
        Server.run_simple ~css ~js ~html ~port server
      in Lwt_main.run p
    in
    let main_t = Term.(const run $ port $ root $ contents $ store $ mutations) in
    Term.exit @@ Term.eval (main_t, Term.info name)

  let run name =
    let run port root contents store static allow_mutations =
      let c = Irmin_unix.Cli.mk_contents contents in
      let (module Store) = Irmin_unix.Cli.mk_store store c in
      let module Server = Make(Store) in
      let p =
        Server.create ~allow_mutations (config root) >>= fun server ->
        Server.run ?static ~port server
      in Lwt_main.run p
    in
    let main_t = Term.(const run $ port $ root $ contents $ store $ static $ mutations) in
    Term.exit @@ Term.eval (main_t, Term.info name)
end

(*---------------------------------------------------------------------------
   Copyright (c) 2018 Zach Shipko

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  ---------------------------------------------------------------------------*)
